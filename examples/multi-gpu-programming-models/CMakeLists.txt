find_package(OpenMP REQUIRED)
find_package(MPI REQUIRED)
find_package(NCCL)
find_package(NVSHMEM)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

set(CMAKE_CUDA_STANDARD 14)
set(CMAKE_CUDA_STANDARD_REQUIRED ON)
set(CMAKE_CUDA_EXTENSIONS OFF)

set(targets single_gpu single_threaded_copy )
set(nccl_targets nccl_basic) 
set(mpi_targets mpi_basic mpi_overlap)
set(nvshmem_targets nvshmem_basic nvshmem_opt) 
if (NCCL_FOUND)
	# All NCCL targets are, in particular, MPI targets
	list(APPEND mpi_targets ${nccl_targets})
endif()
# Nte that, at the moment, there's no way NVSHMEM could be found, since
# we're not running a find script for it
if (NVSHMEM_FOUND)
	# All nvshmem targets are, in particular, MPI targets
	list(APPEND mpi_targets ${nvshmem_targets})
endif()
if (MPI_FOUND)
	list(APPEND targets ${mpi_targets})
endif()
set(separate_kernels_targets mpi_basic mpi_overlap nccl_basic)

foreach(tgt ${targets})
	if (${tgt} IN_LIST separate_kernels_targets)
		add_library(${tgt}_kernels OBJECT "${tgt}/jacobi_kernels.cu")
		add_executable(${tgt} $<TARGET_OBJECTS:${tgt}_kernels> "${tgt}/jacobi.cpp")
		target_link_libraries(${tgt} PRIVATE ${tgt}_kernels)
	else()
		add_executable(${tgt} "${tgt}/jacobi.cu")
	endif()
	if (${tgt} IN_LIST nccl_targets)
		target_link_libraries(${tgt} PRIVATE NCCL::NCCL)
	endif()
	if (${tgt} IN_LIST mpi_targets)
		target_compile_definitions(${tgt} PRIVATE "SKIP_CUDA_AWARENESS_CHECK")
		target_link_libraries(${tgt} PRIVATE MPI::MPI_CXX)
	endif()
	if (${tgt} IN_LIST nvshmem_targets)
		# This currently can't happen - we don't look for an nvshmem package
		target_link_libraries(${tgt} PRIVATE nvshmem::nvshmem)
	endif()
endforeach()

option(WITH_CUB "Use CUB for the GPU programming model examples" OFF)

if (WITH_CUB)
	find_package(cub REQUIRED)
	foreach(tgt ${targets})
		target_link_libraries(${tgt} PRIVATE cub::cub)
			target_compile_definitions(${tgt} HAVE_CUB)
		if (${tgt} IN_LIST separate_kernels_targets)
			target_compile_definitions(${tgt}_kernels HAVE_CUB)
		endif()
	endforeach()
else()
	foreach(tgt ${targets})
		if (${tgt} IN_LIST separate_kernels_targets)
			set(ptxas_target ${tgt}_kernels)
		else()
			set(ptxas_target ${tgt})
		endif()
		target_compile_options(${ptxas_target} PRIVATE "-Xptxas" "--optimize-float-atomics")
	endforeach()
endif()

foreach(tgt ${targets})
	if (${tgt} IN_LIST separate_kernels_targets)
		target_compile_options(${tgt} PRIVATE -fopenmp -g)
	else()
		target_compile_options(${tgt} PRIVATE  --generate-line-info -Xcompiler -fopenmp)
	endif()
	target_compile_definitions(${tgt} PRIVATE USE_NVTX)
	if (${tgt} IN_LIST separate_kernels_targets)
		target_compile_definitions(${tgt}_kernels PRIVATE USE_NVTX)
	endif()
	target_link_libraries(${tgt} PRIVATE runtime-and-driver OpenMP::OpenMP_CXX CUDA::nvToolsExt)
endforeach()

